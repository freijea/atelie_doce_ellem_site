import fs from 'fs/promises';
import path from 'path';
import sharp from 'sharp';
import { sync as globSync } from 'glob';

// --- Configura√ß√µes ---
const DEFAULT_SIZES = [320, 480, 640, 768, 1024, 1280, 1600, 1920];
const QUALITY_WEBP = 75;
const QUALITY_PNG = 90; // PNG √© lossless, mas 'quality' afeta compress√£o/tamanho
const SUPPORTED_INPUT_FORMATS = '{jpg,jpeg,png,gif,tiff,bmp}'; // Adicione outros formatos que Sharp suporta se necess√°rio

/**
 * Otimiza imagens de um diret√≥rio de origem para m√∫ltiplos tamanhos e formatos (PNG, WebP).
 *
 * @param {string} sourceDir Diret√≥rio contendo as imagens originais.
 * @param {string} outputDir Diret√≥rio onde as imagens otimizadas ser√£o salvas.
 * @param {number[]} sizes Array com as larguras desejadas para as imagens.
 * @param {boolean} cleanSourceDir Se true, remove os arquivos originais do sourceDir ap√≥s a otimiza√ß√£o.
 */
async function optimizeImages(sourceDir, outputDir, sizes, cleanSourceDir = false) {
  console.log(`üîç Buscando imagens em ${sourceDir} com padr√£o ${SUPPORTED_INPUT_FORMATS}`);
  const imagePattern = `**/*.${SUPPORTED_INPUT_FORMATS}`;
  // Garante que o diret√≥rio de sa√≠da exista
  await fs.mkdir(outputDir, { recursive: true });

  const imagePaths = globSync(imagePattern, {
    cwd: sourceDir,
    absolute: true,
    nodir: true,
    ignore: ['**/*-*.webp', '**/*-*.png'] // Ignora arquivos j√° otimizados se rodar de novo
  });

  if (imagePaths.length === 0) {
    console.log('‚úÖ Nenhuma imagem encontrada para otimizar.');
    return;
  }

  console.log(`üöÄ Otimizando ${imagePaths.length} imagens para ${sizes.length} tamanhos (PNG/WebP)...`);

  let successCount = 0;
  let errorCount = 0;
  const processedOriginals = new Set(); // Para rastrear originais processados para limpeza

  const optimizationPromises = imagePaths.flatMap((imgPath) => {
    const parsedPath = path.parse(imgPath);
    // Previne otimizar arquivos j√° no formato/nome esperado (seguran√ßa extra)
    if (parsedPath.name.match(/-\d+w$/)) return [];

    processedOriginals.add(imgPath); // Adiciona original para poss√≠vel remo√ß√£o

    return sizes.map(async (size) => {
      const outputNameBase = path.join(outputDir, `${parsedPath.name}-${size}w`);
      const pngPath = `${outputNameBase}.png`;
      const webpPath = `${outputNameBase}.webp`;

      try {
        const image = sharp(imgPath);
        const metadata = await image.metadata();

        // S√≥ redimensiona se a imagem for maior que o tamanho alvo
        if (metadata.width && metadata.width > size) {
          // Gerar PNG
          await image
            .clone() // Clona para n√£o afetar a gera√ß√£o WebP
            .resize({ width: size })
            .png({ quality: QUALITY_PNG, effort: 4 }) // Ajuste 'effort' se necess√°rio
            .toFile(pngPath);

          // Gerar WebP
          await image
            .clone() // Clona da original redimensionada (ou da original se n√£o redimensionou)
            .resize({ width: size }) // Garante o resize mesmo que n√£o clonado antes
            .webp({ quality: QUALITY_WEBP, effort: 4 })
            .toFile(webpPath);

        } else {
           // Se a imagem j√° for menor ou igual, apenas converte os formatos no tamanho original
           const smallerOutputNameBase = path.join(outputDir, `${parsedPath.name}-${metadata.width || 'orig'}w`);
           const smallerPngPath = `${smallerOutputNameBase}.png`;
           const smallerWebpPath = `${smallerOutputNameBase}.webp`;

           await image.clone().png({ quality: QUALITY_PNG, effort: 4 }).toFile(smallerPngPath);
           await image.clone().webp({ quality: QUALITY_WEBP, effort: 4 }).toFile(smallerWebpPath);
           console.log(` Gera√ß√£o apenas para tamanho original ${metadata.width || 'orig'}w para ${parsedPath.base}`);
           // N√£o incrementa successCount aqui para refletir apenas os tamanhos gerados
        }
         successCount++; // Conta sucesso por tamanho/imagem
      } catch (error) {
        console.error(`‚ùå Erro ao processar ${parsedPath.base} para ${size}w:`, error);
        errorCount++;
      }
    });
  });


  await Promise.all(optimizationPromises);

  console.log('--- Otimiza√ß√£o Conclu√≠da ---');
  console.log(`üëç Sucesso (tamanho/imagem): ${successCount}`);
  console.log(`üëé Falhas: ${errorCount}`);
  console.log('---------------------------');

  if (cleanSourceDir && processedOriginals.size > 0) {
    console.log(`üßπ Limpando ${processedOriginals.size} imagens originais de ${sourceDir}...`);
    let deleteSuccess = 0;
    let deleteError = 0;
    const deletePromises = Array.from(processedOriginals).map(async (originalPath) => {
      try {
        await fs.unlink(originalPath);
        deleteSuccess++;
      } catch (delError) {
        console.error(` R Erro ao deletar ${path.basename(originalPath)}:`, delError);
        deleteError++;
      }
    });
    await Promise.all(deletePromises);
    console.log(` Limpeza conclu√≠da: ${deleteSuccess} sucesso, ${deleteError} falhas.`);
  }

  if (errorCount > 0) {
       process.exit(1); // Sai com erro se houver falha na otimiza√ß√£o
   }
}

// --- Execu√ß√£o (Exemplo para o contexto do build) ---
// No seu script de build (ex: package.json), voc√™ chamaria algo como:
// "build:optimize": "node ./scripts/optimize-images.mjs"
// Este bloco executa se o script for chamado diretamente
if (process.argv[1] === new URL(import.meta.url).pathname) {
  const buildSourceDir = path.join(process.cwd(), 'out'); // Diret√≥rio de sa√≠da do build
  const buildOutputDir = path.join(process.cwd(), 'out'); // Salva no mesmo lugar
  // Chama a fun√ß√£o com os par√¢metros para o build
  optimizeImages(buildSourceDir, buildOutputDir, DEFAULT_SIZES, true) // Limpa os originais no build
    .catch(err => {
      console.error("Erro fatal na otimiza√ß√£o de imagens:", err);
      process.exit(1);
    });
}

// Exporta a fun√ß√£o para uso program√°tico futuro
export default optimizeImages;